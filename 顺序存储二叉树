public class ArrBinaryTreeDemo {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
        //创建数组
		int[] arr= {1,2,3,4,5,6,7};
		//进行前序遍历
		BinaryTree2 bTree=new BinaryTree2(arr);
		bTree.afterOrder();
	}

}

class BinaryTree2{
	private int[] arr; //存储数据节点的数组

	public BinaryTree2(int[] arr) {
		this.arr = arr;
	}
	
	//重载preOrder
	public void preOrder(){
		preOrder(0);
	}
	
	//重载infixOrder
	public void infixOrder() {
		infixOrder(0);
	}
	
	//重载afterOrder
	public void afterOrder() {
		afterOrder(0);
	}
	
	//编写方法完成前序遍历
	//index为数组的下标
	public void preOrder(int index) {
		if(arr!=null&&arr.length!=0) {
			System.out.println(arr[index]); //输出当前节点
			
			if(2*index+1<arr.length) {   //向左子节点进行递归遍历
				preOrder(2*index+1);
			}
			
			if(2*index+2<arr.length) {
				//向右节点进行递归遍历
				preOrder(2*index+2);
			}
		}else {
			System.out.println("数组为空");
		}
	}
	
	//中序遍历
	public void infixOrder(int index) {
		if(arr!=null&&arr.length!=0) {
			if(2*index+1<arr.length) {   //向左遍历节点
				infixOrder(2*index+1);
			}
			
			System.out.println(arr[index]);  //输出当前节点
			
			if(2*index+2<arr.length) {   //向右遍历节点
				infixOrder(2*index+2);
			}
		}else {
			System.out.println("数组为空");
		}
	}
	
	//后序遍历
	public void afterOrder(int index) {
		if(arr!=null&&arr.length!=0) {
			if(2*index+1<arr.length) {
				afterOrder(2*index+1);
			}
			
			if(2*index+2<arr.length) {
				afterOrder(2*index+2);
			}
			
			System.out.println(arr[index]);
		}else {
			System.out.println("数组为空");
		}
	}
	
}
