public class MergeSort {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		//测试数组
		int[] arr= {8,4,5,7,1,3,6,2};
		int[] temp=new int[arr.length];
		mergeSort(arr, 0, arr.length-1, temp);
		System.out.println("归并排序后="+Arrays.toString(arr));
	}
	
	//分+合的方法
	public static void mergeSort(int[] arr,int left,int right,int[] temp) {
		if(left<right) {
			int mid=(left+right)/2;  //中间索引
			//向左递归进行分解
			mergeSort(arr, left, mid, temp);
			//向右递归进行分解
			mergeSort(arr,mid+1,right,temp);
			//到合并
			merge(arr, left, mid, right, temp);
		}
	}
	
	//合并的方法
	/**
	 * @param arr 原始数组
	 * @param left  左边有序序列的初始索引
	 * @param mid   中间索引
	 * @param right 右边有序序列的初始索引
	 * @param temp  作为中转的数组
	 */
	public static void merge(int[] arr,int left,int mid,int right,int[] temp) {
		int i=left; //左边有序序列的初始索引
		int j=mid+1; //右边有序序列的初始索引
		int t=0;     //中间数组的索引 
		
		//先把左右两边的数据按照规则填充到temp中
		while(i<=mid&&j<=right) {
			if(arr[i]<=arr[j]) {
				temp[t]=arr[i];
				t++;
				i++;
			}else {
				temp[t]=arr[j];
				t++;
				j++;
			}
		}
		
		//左边序列还有剩余数据
		while(i<=mid) {
			temp[t]=arr[i];
			t++;
			i++;
		}
		
		//右边序列还有剩余数据
		while(j<=right) {
			temp[t]=arr[j];
			t++;
			j++;
		}
		
		//将temp数组的元素拷贝到arr中
		t=0;
		int tempLeft=left;
		while(tempLeft<=right) {
			arr[tempLeft]=temp[t];
			t++;
			tempLeft++;
		}
	}

}
