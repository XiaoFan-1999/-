public class SigleLinkedList {
	 //创建头结点。表示链表的头
	private Node Head=new Node(0,"","");
	
	//AddNode1:添加节点到单链表的尾部
	//思路：当不考虑节点顺序
	//1、找到链表的最后一个节点
	//2、将最后这个节点的Next指向新节点
	public void AddNode1(Node node) {
		//因为头节点不能动，所以需要一个辅助节点遍历
		Node temp=Head;
		while(true) {
			//找到链表的最后一个节点
			if(temp.next==null) {
				break;
			}
			//否则temp=temp的下一个节点
			temp=temp.next;
		}
		//循环出来之后，temp是最后一个节点
		temp.next=node;
	}
	
	
	//AddNode2:添加节点，按顺序
	public void AddNode2(Node node) {
		//因为头结点不能动，所以需要一个辅助节点遍历，找到添加新节点的位置
		Node temp=Head;
		boolean flag=false; //用于标识链表中是否已经存在新节点的顺序
		while(true) {
			//如果该节点是最后一个节点，则新节点添加到最后一个位置
			if(temp.next==null) {
				break;
			}else if(temp.next.number>node.number) { //说明找到了添加新节点的位置
				break;
			}else if(temp.next.number==node.number) { //说明新节点的顺序已经存在在链表中
				flag=true;
			}
			temp=temp.next;
		}
		if(flag) {
			System.out.println("该节点的顺序已经存在，插入失败");
		}else {
			//则说明新节点在链表中不存在，插入新节点
			//新节点的下一个节点=辅助节点的下一个节点
			node.next=temp.next;
			//辅助节点的下一个节点=新节点
			temp.next=node;
		}
		
	}
	
	//删除节点
	public void remove(Node node) {
		if(Head.next==null) {
			System.out.println("链表为空！");
			return;
		}
		//创建辅助节点
		Node temp=Head;
		boolean flag=false; //标识是否找到了要删除的节点
		while(true) {
			if(temp.next==null) { //遍历完链表了
				break;
			}else if(temp.next.number==node.number) { //找到要删除的节点了
				flag=true;
				break;
			}
			temp=temp.next;
		}
		if(flag) { //链表中存在要删除的节点
			temp.next=temp.next.next;
		}else {
			System.out.printf("不存在编号为%d的节点",node.number);
		}
	}
	
	//修改节点，按照节点的Number来修改
	public void update(Node newNode) {
		if(Head.next==null) {
			System.out.println("链表为空！");
			return;
		}
		//创建辅助节点，对链表遍历，知道找到等于修改节点的number的时候
		Node temp=Head.next;
		boolean flag=false; //用来标识是否找到了修改节点的Number
		while(true) {
			if(temp==null) { //则已经遍历完链表
				break;
			}
			if(temp.number==newNode.number) {
				flag=true;
				break;
			}
			temp=temp.next;
		}
		if(flag) {
			temp.name=newNode.name;
			temp.nickName=newNode.nickName;
		}else {
			System.out.printf("没有找到编号为%d的节点",newNode.number);
		}
	}
	//展示链表
	public void show() {
		if(Head.next==null) {
			System.out.println("链表为空！");
			return;
		}
		//因为头节点不能动，所以通过辅助节点遍历链表
		Node temp=Head.next;
		while(true) {
			//判断是不是最后一个节点
			if(temp.next==null) {
				System.out.println(temp);
				break;
			}
			System.out.println(temp);
			//temp指向下一个节点
			temp=temp.next;
		}
	}

}

//创建节点
class Node{
	public int number;
	public String name;
	public String nickName;
	public Node next; //指向下一个节点
	
	//构造器
	public Node(int number,String name,String nickName) {
		this.number=number;
		this.name=name;
		this.nickName=nickName;
		
		
	}

	@Override
	public String toString() {
		return "Node [number=" + number + ", name=" + name + ", nickName=" + nickName + "]";
	}
}
