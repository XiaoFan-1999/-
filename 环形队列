public class CircleArrayQueue {
	private int maxSize;  //队列的最大存储
    private int rear;  
    private int front; 
    private int[] arr;
    
    //创建队列的构造器
    public  CircleArrayQueue(int max) {
    	maxSize=max;
    	arr=new int[maxSize]; //创建队列
    	front=0;    //队列的头，指向队列头,即队列的第一个数据
    	rear=0;     //队列的尾，指向队列的尾部的后一个位置
    }
    
    //判断队列是否为空
    public boolean isEmpty() {
    	return rear==front;
    }
    
    //判断队列是否已满
    public boolean isFull() {
    	return (rear+1)%maxSize==front; //为什么要对rear+1进行取模？因为队列是一个环形队列，不取模会发生索引越界问题
    }
    
    //往队列中添加数据
    public void addQueue(int val) {
    	if(isFull()) {
    		System.out.println("队列已满");
    		return;
    	}
    	arr[rear]=val; //为什么先进行赋值？因为rear指向队列的最后一个数据的后一个位置
    	rear++;
    }
    
    //从队列中取数据
    public int getQueue() {
    	if(isEmpty()) {
    		System.out.println("队列为空，没有数据");
    	}
    	int value=arr[front];
    	front=(front+1)%maxSize;
    	return value;
    }
    
    //计算出队列中的有效数据个数
    public int usefulData() {
    	return (rear+maxSize-front)%maxSize;
    }
    
    //遍历队列
    public void showQueue() {
    	if(isEmpty()) {
    		System.out.println("队列为空，没有数据");
    	}
    	for(int i=front;i<front+usefulData();i++) {
    		System.out.printf("arr[%d]=%d\n",i%maxSize,arr[i%maxSize]);
    	}
    }
    
    //获取头数据
    public int headQueue() {
    	return arr[front];
    }
    
}
