public class HeapSort {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		//要求数组升序，故用大顶堆
		//定义测试的数组
		int[] arr= {4,6,8,5,9};
		heapSort(arr);
	}
	
	//编写一个堆排序的方法
	public static void heapSort(int[] arr) {
		//i=arr.length/2-1表示有几个非叶子节点
		//1、将无序序列构建成一个堆，根据升序需求选择大顶堆还是小顶堆
		for(int i=arr.length/2-1;i>=0;i--) {
			adjustHeap(arr, arr.length, i);
		}
		//2、将堆顶元素与末尾元素交换，将最大元素沉到数组末端
		//3、重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整加交换步骤，直到整个序列有序
		for(int j=arr.length -1;j>0;j--) {
			int temp=arr[j];
			arr[j]=arr[0];
			arr[0]=temp;
			adjustHeap(arr, j, 0);
		}
		System.out.println("数组为："+Arrays.toString(arr));
	}
	
	//将一个数组（二叉树）调整成一个大顶堆
	//arr 表示待调整的数组
	//index表示非叶子节点的索引
	//length 表示对多少个元素继续调整，length在逐渐减少
	public static void adjustHeap(int[] arr,int length,int index) {
		int temp=arr[index];  //取出当前元素的值，保存临时变量
		//i=2*index+1表示Index的左子节点
		for(int i=2*index+1;i<length;i=2*i+2) {
			if(i+1<length&&arr[i]<arr[i+1]) {  //当左子节点小于右子节点
				i++;  //i指向右子节点
			}
			if(arr[i]>temp) {
				arr[index]=arr[i];  //把较大的值赋给当前的节点
				index=i;    //让index指向i，继续循环比较
			}else {
				break;
			}
		}
		//循环结束后，已经把以index为父节点的树的最大的数放在了最顶上
		arr[index]=temp;  //将temp赋值给调整后的位置
	}
	
	

}
