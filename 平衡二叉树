public class AVLTreeDemo {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		int[] arr= {10,11,7,6,8,9};
		//创建一个AVLTree对象
		AVLTree avlTree=new AVLTree();
		for(int i=0;i<arr.length;i++) {
			avlTree.add(new Node(arr[i]));
		}
		System.out.println("中序遍历为：");
		avlTree.infixOrder();
		
		System.out.println("树的高度为："+avlTree.getRoot().height());
		System.out.println("左子树高度为："+avlTree.getRoot().leftHeight());
		System.out.println("右子树高度为："+avlTree.getRoot().rightHeight());
	}

}

//创建AVL树
class AVLTree {
	private Node root;

	public Node getRoot() {
		return root;
	}
	
	// 添加节点的方法
	public void add(Node node) {
		if (root == null) {
			root = node;
		} else {
			root.add(node);
		}
	}

	// 查找要删除的节点
	public Node searchNode(int value) {
		if (root == null) {
			return null;
		} else {
			return root.searchNode(value);
		}
	}

	// 查找要删除节点的父节点
	public Node searchParent(int value) {
		if(root==null) {
			return null;
		}else {
			return root.searchParent(value);
		}
	}

	// 删除节点
	public void delNode(int value) {
		if(root==null) {
			return;
		}else {
			//先找到要删除的节点
			Node targetNode=searchNode(value);
			//如果没有要删除的节点
			if(targetNode==null) {
				return;
			}
			//如果发现只有root这一个节点
			if(root.left==null&&root.right==null) {
				root=null;
				return;
			}
			//查找要删除节点的父节点
			Node parent=searchParent(value);
			//如果要删除的节点为叶子节点
			if(targetNode.left==null&&targetNode.right==null) {
				//判断targetNode是parent的左子节点还是右子节点
				if(parent.left!=null&&parent.left.value==value) {
					parent.left=null;
				}else if(parent.right!=null&&parent.right.value==value) {
					parent.right=null;
				}
			}else if(targetNode.left!=null&&targetNode.right==null) {
				if(parent==null) {
					root=targetNode.left;
				}else {
					//如果要删除的节点为只有一颗左子树的节点
					if(parent.left!=null&&parent.left.value==value) {
						//如果要删除的节点在父节点的左边
						parent.left=targetNode.left;
					}else if(parent.right!=null&&parent.right.value==value) {
						//如果删除的节点在父节点的右边
						parent.right=targetNode.left;
					}
				}
			}else if(targetNode.right!=null&&targetNode.left==null) {
				if(parent==null) {
					root=targetNode.right;
				}else{
					//如果要删除的节点为只有一颗右子树的节点
					if(parent.left!=null&&parent.left.value==value) {
						parent.left=targetNode.right;
					}else if(parent.right!=null&&parent.right.value==value) {
						parent.right=targetNode.right;
					}
				}
			}else {
				//要删除的节点为非叶子节点
				//从targetNode的右子树找到最小的值
				//创建一个辅助节点
				Node tempNode=targetNode;
				if(targetNode.right!=null) {
					targetNode=targetNode.right;
					while(targetNode.left!=null) {
						targetNode=targetNode.left;
					}
				}
				//定义一个变量存储最小的值
				int temp=targetNode.value;
				delNode(targetNode.value);
				tempNode.value=temp;

			}
		}
	}
	
	// 中序遍历
	public void infixOrder() {
		if (root != null) {
			root.infixOrder();
		} else {
			System.out.println("当前二叉排序树为空");
		}
	}
}

class Node{
	int value;
	Node left;
	Node right;
	
	public Node(int value) {
		this.value = value;
	}
	
	//返回左子树的高度
	public int leftHeight() {
		if(left==null) {
			return 0;
		}
		return left.height();
	}
	
	//返回右子树的高度
	public int rightHeight() {
		if(right==null) {
			return 0;
		}
		
		return right.height();
	}
	
	//返回以当前节点为根节点的树的高度
	public int height() {
		return Math.max(left==null?0:left.height(), right==null?0:right.height())+1;
	}
	
	//左旋转方法
	public void leftRotate() {
		//创建一个新的节点newNode，值等于当前节点的值
		Node newNode=new Node(this.value);
		//把新节点的左子树设置为当前节点的左子树
		newNode.left=this.left;
		//把新节点的右子树设置为当前节点的右子树的左子树
		newNode.right=this.right.left;
		//把当前节点的值换为当前节点的右子树的值
		this.value=this.right.value;
		//把当前节点的右子树设置为当前节点的右子树的右子树
		this.right=this.right.right;
		//把当前节点的左子树设置为新节点
		this.left=newNode;
	}
	
	//右旋转方法
	public void rightRotate() {
		// 创建一个新的节点newNode，值等于当前节点的值
		Node newNode = new Node(this.value);
		// 把新节点的右子树设置为当前节点的右子树
		newNode.right = this.right;
		// 把新节点的左子树设置为当前节点的左子树的右子树
		newNode.left = this.left.right;
		// 把当前节点的值换为当前节点的左子树的值
		this.value = this.left.value;
		// 把当前节点的左子树设置为当前节点的左子树的左子树
		this.left = this.left.left;
		// 把当前节点的右子树设置为新节点
		this.right = newNode;
			
	}
	
	
	@Override
	public String toString() {
		return "Node [value=" + value + "]";
	}

	
	//编写一个查找要删除的节点的方法
	public Node searchNode(int value) {
		if(this.value==value) {
			return this;
		}else if(value<this.value){
			if(this.left!=null) {
				//向左遍历查找
				return this.left.searchNode(value);
			}else {
				return null;
			}
		}else {
			if(this.right!=null) {
				//向右遍历查找
				return this.right.searchNode(value);
			}else {
				return null;
			}
		}
	}
	
	//编写一个查找要删除的节点的父节点的方法
	public Node searchParent(int value) {
		//当前节点就是要删除节点的父节点
		if((this.left!=null&&this.left.value==value)||(this.right!=null&&this.right.value==value)) {
			return this;
		}else {
			//向左边遍历查找
			if(this.left!=null&&this.value>value) {
				return this.left.searchParent(value);
			}else if(this.right!=null&&this.value<=value) {
				//向右边遍历查找
				return this.right.searchParent(value);
			}else {
				//如果没有父节点
				return null;
			}
		}
	}



	//编写一个在末尾添加节点的方法
	public void add(Node node) {
		if(node==null) {
			return;
		}
		
		if(node.value<this.value) {
			//如果当前节点的左节点为空
			if(this.left==null) {
				this.left=node;
			}else {
				//如果当前节点的左节点不为空，则向左进行遍历
				this.left.add(node);
			}
		}else {
			//如果当前节点的右节点为空
			if(this.right==null) {
				this.right=node;
			}else {
				//向右进行遍历
				this.right.add(node);
			}
		}
		
		//当添加完一个节点后，如果右子树的高度-左子树高度>1，进行左旋转
		if(rightHeight()-leftHeight()>1) {
			//如果当前节点的右子树的左子树的高度大于右子树
			if(right!=null&&right.leftHeight()>right.rightHeight()) {
				right.rightRotate();
				leftRotate(); 
			}else {
			    leftRotate(); //左旋转
			}
			return;
		}
		
		//当添加完一个节点后，如果左子树的高度-右子树高度>1，进行右旋转
		if(leftHeight()-rightHeight()>1) {
			//如果当前节点的左子树的右子树的高度大于左子树的高度
			if(left!=null&&left.rightHeight()>left.leftHeight()) {
				left.leftRotate();
				rightRotate();
			}else {
			    rightRotate();
			}
			
		}
		
		
	}
	
	
	
	//对二叉树进行中序遍历
	public void infixOrder() {
		
		if(this.left!=null) {
			this.left.infixOrder();
		}
		
		System.out.println(this);
		
		if(this.right!=null) {
			this.right.infixOrder();
		}
	}
}
